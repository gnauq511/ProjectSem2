{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst CartService = {\n  /**\n   * Get all items in a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with cart items\n   */\n  getCartItems: async customerId => {\n    try {\n      const response = await axios.get(`${API_URL}/api/cart/${customerId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cart items:', error);\n      throw error;\n    }\n  },\n  /**\n   * Add a product to the cart\n   * @param {number} customerId - The customer ID\n   * @param {number} productId - The product ID to add\n   * @param {number} quantity - The quantity to add (default: 1)\n   * @returns {Promise} - Promise with the added cart item\n   */\n  addToCart: async (customerId, productId, quantity = 1) => {\n    try {\n      const response = await axios.post(`${API_URL}/api/cart/${customerId}/add?productId=${productId}&quantity=${quantity}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      throw error;\n    }\n  },\n  /**\n   * Update the quantity of a cart item\n   * @param {number} cartItemId - The cart item ID\n   * @param {number} quantity - The new quantity\n   * @returns {Promise} - Promise with the updated cart item\n   */\n  updateCartItemQuantity: async (cartItemId, quantity) => {\n    try {\n      const response = await axios.put(`${API_URL}/api/cart/item/${cartItemId}?quantity=${quantity}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating cart item quantity:', error);\n      throw error;\n    }\n  },\n  /**\n   * Remove an item from the cart\n   * @param {number} cartItemId - The cart item ID to remove\n   * @returns {Promise} - Promise with the result\n   */\n  removeFromCart: async cartItemId => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/cart/item/${cartItemId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from cart:', error);\n      throw error;\n    }\n  },\n  /**\n   * Clear all items from a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with the result\n   */\n  clearCart: async customerId => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/cart/${customerId}/clear`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cart:', error);\n      throw error;\n    }\n  }\n};\nexport default CartService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","CartService","getCartItems","customerId","response","get","data","error","console","addToCart","productId","quantity","post","updateCartItemQuantity","cartItemId","put","removeFromCart","delete","clearCart"],"sources":["D:/projectSem2BullXit/ProjectSem2/Frontend/src/services/cartService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst CartService = {\n  /**\n   * Get all items in a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with cart items\n   */\n  getCartItems: async (customerId) => {\n    try {\n      const response = await axios.get(`${API_URL}/api/cart/${customerId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cart items:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Add a product to the cart\n   * @param {number} customerId - The customer ID\n   * @param {number} productId - The product ID to add\n   * @param {number} quantity - The quantity to add (default: 1)\n   * @returns {Promise} - Promise with the added cart item\n   */\n  addToCart: async (customerId, productId, quantity = 1) => {\n    try {\n      const response = await axios.post(\n        `${API_URL}/api/cart/${customerId}/add?productId=${productId}&quantity=${quantity}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update the quantity of a cart item\n   * @param {number} cartItemId - The cart item ID\n   * @param {number} quantity - The new quantity\n   * @returns {Promise} - Promise with the updated cart item\n   */\n  updateCartItemQuantity: async (cartItemId, quantity) => {\n    try {\n      const response = await axios.put(\n        `${API_URL}/api/cart/item/${cartItemId}?quantity=${quantity}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error updating cart item quantity:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Remove an item from the cart\n   * @param {number} cartItemId - The cart item ID to remove\n   * @returns {Promise} - Promise with the result\n   */\n  removeFromCart: async (cartItemId) => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/cart/item/${cartItemId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from cart:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Clear all items from a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with the result\n   */\n  clearCart: async (customerId) => {\n    try {\n      const response = await axios.delete(`${API_URL}/api/cart/${customerId}/clear`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cart:', error);\n      throw error;\n    }\n  }\n};\n\nexport default CartService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;EACEC,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,GAAGR,OAAO,aAAaM,UAAU,EAAE,CAAC;MACrE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,SAAS,EAAE,MAAAA,CAAON,UAAU,EAAEO,SAAS,EAAEC,QAAQ,GAAG,CAAC,KAAK;IACxD,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMR,KAAK,CAACgB,IAAI,CAC/B,GAAGf,OAAO,aAAaM,UAAU,kBAAkBO,SAAS,aAAaC,QAAQ,EACnF,CAAC;MACD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEM,sBAAsB,EAAE,MAAAA,CAAOC,UAAU,EAAEH,QAAQ,KAAK;IACtD,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMR,KAAK,CAACmB,GAAG,CAC9B,GAAGlB,OAAO,kBAAkBiB,UAAU,aAAaH,QAAQ,EAC7D,CAAC;MACD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACES,cAAc,EAAE,MAAOF,UAAU,IAAK;IACpC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAACqB,MAAM,CAAC,GAAGpB,OAAO,kBAAkBiB,UAAU,EAAE,CAAC;MAC7E,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEW,SAAS,EAAE,MAAOf,UAAU,IAAK;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACqB,MAAM,CAAC,GAAGpB,OAAO,aAAaM,UAAU,QAAQ,CAAC;MAC9E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from './api';\nconst CartService = {\n  /**\n   * Get all items in a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with cart items\n   */\n  getCartItems: async customerId => {\n    try {\n      const response = await api.get(`/cart/${customerId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cart items:', error);\n      return []; // Return empty array on error to prevent UI crashes\n    }\n  },\n  /**\n   * Add a product to the cart\n   * @param {number} customerId - The customer ID\n   * @param {number} productId - The product ID to add\n   * @param {number} quantity - The quantity to add (default: 1)\n   * @returns {Promise} - Promise with the added cart item\n   */\n  addToCart: async (customerId, productId, quantity = 1, size) => {\n    try {\n      const response = await api.post(`/cart/${customerId}/add?productId=${productId}&quantity=${quantity}&size=${size}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      alert('Failed to add item to cart. Please try again.');\n      return null;\n    }\n  },\n  /**\n   * Update the quantity of a cart item\n   * @param {number} cartItemId - The cart item ID\n   * @param {number} quantity - The new quantity\n   * @returns {Promise} - Promise with the updated cart item\n   */\n  updateCartItemQuantity: async (cartItemId, quantity) => {\n    try {\n      const response = await api.put(`/cart/item/${cartItemId}?quantity=${quantity}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating cart item quantity:', error);\n      alert('Failed to update cart item. Please try again.');\n      return null;\n    }\n  },\n  /**\n   * Remove an item from the cart\n   * @param {number} cartItemId - The cart item ID to remove\n   * @returns {Promise} - Promise with the result\n   */\n  removeFromCart: async cartItemId => {\n    try {\n      const response = await api.delete(`/cart/item/${cartItemId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from cart:', error);\n      alert('Failed to remove item from cart. Please try again.');\n      return null;\n    }\n  },\n  /**\n   * Clear all items from a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with the result\n   */\n  clearCart: async customerId => {\n    try {\n      const response = await api.delete(`/cart/${customerId}/clear`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cart:', error);\n      alert('Failed to clear cart. Please try again.');\n      return null;\n    }\n  }\n};\nexport default CartService;","map":{"version":3,"names":["api","CartService","getCartItems","customerId","response","get","data","error","console","addToCart","productId","quantity","size","post","alert","updateCartItemQuantity","cartItemId","put","removeFromCart","delete","clearCart"],"sources":["D:/projectSem2BullXit/ProjectSem2/Frontend/src/services/CartService.js"],"sourcesContent":["import api from './api';\n\nconst CartService = {\n  /**\n   * Get all items in a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with cart items\n   */\n  getCartItems: async (customerId) => {\n    try {\n      const response = await api.get(`/cart/${customerId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cart items:', error);\n      return []; // Return empty array on error to prevent UI crashes\n    }\n  },\n\n  /**\n   * Add a product to the cart\n   * @param {number} customerId - The customer ID\n   * @param {number} productId - The product ID to add\n   * @param {number} quantity - The quantity to add (default: 1)\n   * @returns {Promise} - Promise with the added cart item\n   */\n  addToCart: async (customerId, productId, quantity = 1, size) => {\n    try {\n      const response = await api.post(\n        `/cart/${customerId}/add?productId=${productId}&quantity=${quantity}&size=${size}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      alert('Failed to add item to cart. Please try again.');\n      return null;\n    }\n  },\n\n  /**\n   * Update the quantity of a cart item\n   * @param {number} cartItemId - The cart item ID\n   * @param {number} quantity - The new quantity\n   * @returns {Promise} - Promise with the updated cart item\n   */\n  updateCartItemQuantity: async (cartItemId, quantity) => {\n    try {\n      const response = await api.put(\n        `/cart/item/${cartItemId}?quantity=${quantity}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error updating cart item quantity:', error);\n      alert('Failed to update cart item. Please try again.');\n      return null;\n    }\n  },\n\n  /**\n   * Remove an item from the cart\n   * @param {number} cartItemId - The cart item ID to remove\n   * @returns {Promise} - Promise with the result\n   */\n  removeFromCart: async (cartItemId) => {\n    try {\n      const response = await api.delete(`/cart/item/${cartItemId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error removing from cart:', error);\n      alert('Failed to remove item from cart. Please try again.');\n      return null;\n    }\n  },\n\n  /**\n   * Clear all items from a customer's cart\n   * @param {number} customerId - The customer ID\n   * @returns {Promise} - Promise with the result\n   */\n  clearCart: async (customerId) => {\n    try {\n      const response = await api.delete(`/cart/${customerId}/clear`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cart:', error);\n      alert('Failed to clear cart. Please try again.');\n      return null;\n    }\n  }\n};\n\nexport default CartService;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;EACEC,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,SAASF,UAAU,EAAE,CAAC;MACrD,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,EAAE,CAAC,CAAC;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,SAAS,EAAE,MAAAA,CAAON,UAAU,EAAEO,SAAS,EAAEC,QAAQ,GAAG,CAAC,EAAEC,IAAI,KAAK;IAC9D,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,GAAG,CAACa,IAAI,CAC7B,SAASV,UAAU,kBAAkBO,SAAS,aAAaC,QAAQ,SAASC,IAAI,EAClF,CAAC;MACD,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CO,KAAK,CAAC,+CAA+C,CAAC;MACtD,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,MAAAA,CAAOC,UAAU,EAAEL,QAAQ,KAAK;IACtD,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACiB,GAAG,CAC5B,cAAcD,UAAU,aAAaL,QAAQ,EAC/C,CAAC;MACD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1DO,KAAK,CAAC,+CAA+C,CAAC;MACtD,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEI,cAAc,EAAE,MAAOF,UAAU,IAAK;IACpC,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACmB,MAAM,CAAC,cAAcH,UAAU,EAAE,CAAC;MAC7D,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDO,KAAK,CAAC,oDAAoD,CAAC;MAC3D,OAAO,IAAI;IACb;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEM,SAAS,EAAE,MAAOjB,UAAU,IAAK;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACmB,MAAM,CAAC,SAAShB,UAAU,QAAQ,CAAC;MAC9D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CO,KAAK,CAAC,yCAAyC,CAAC;MAChD,OAAO,IAAI;IACb;EACF;AACF,CAAC;AAED,eAAeb,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}